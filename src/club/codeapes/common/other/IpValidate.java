package club.codeapes.common.other;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import club.codeapes.common.lang.StringUtil;

/**
 * @author ZJJ
 * @since 2016年5月16日10:53:06
 * IP验证
 */
public class IpValidate {
	
	/**
	 * 验证IPV4单IP有效性
	 * 规则说明除了正规的IPV4规则，另排除0开头的，含有255的
	 * @param ipStr IP字符串
	 * @return 符合true  不符合false
	 */
	public static boolean singleIp4(String ipStr){
		if(ipStr!=null){
		   	 String ipRegx = "^((25[0-4]|2[0-4]\\d|1\\d{2}|[1-9]\\d|[1-9])\\.)((25[0-4]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)\\.){2}(25[0-4]|2[0-4]\\d|1\\d{2}|[1-9]\\d|[0-9])$";
		     if (ipStr.matches(ipRegx))return true;
		}
		return false;
	}
	
	/**
	 * 验证IPV4含星范围
	 * 星只应用B类网段和C类网段
	 * @param ipStr IP字符串
	 * @return 符合true  不符合false
	 */
	public static boolean asteriskIp4(String ipStr){
		if(ipStr!=null){
		   	 String ipRegx = "^((25[0-4]|2[0-4]\\d|1\\d{2}|[1-9]\\d|[1-9])\\.)((25[0-4]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)\\.)(((25[0-4]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)\\.)\\*|\\*\\.\\*)$";
		     if (ipStr.matches(ipRegx))return true;
		}
		return false;
	}
	/**
	 * 验证IPV4含星范围
	 * 星只应用C类网段
	 * @param ipStr IP字符串
	 * @return 符合true  不符合false
	 */
	public static boolean aloneAsteriskIp4(String ipStr){
		if(ipStr!=null){
		   	 String ipRegx = "^((25[0-4]|2[0-4]\\d|1\\d{2}|[1-9]\\d|[1-9])\\.)((25[0-4]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)\\.)(((25[0-4]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)\\.)\\*)$";
		     if (ipStr.matches(ipRegx))return true;
		}
		return false;
	}
	/**
	 * 验证IPV4以横杆号为标记的范围表示
	 * 192.168.1.1-254
	 * @param ipStr IP字符串
	 * @return 符合true  不符合false
	 */
	public static boolean hyphenIp4(String ipStr){
		if(ipStr!=null){
		   	 String ipRegx = "^((25[0-4]|2[0-4]\\d|1\\d{2}|[1-9]\\d|[1-9])\\.)((25[0-4]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)\\.){2}(25[0-4]|2[0-4]\\d|1\\d{2}|[1-9]\\d|[0-9])-(25[0-4]|2[0-4]\\d|1\\d{2}|[1-9]\\d|[1-9])$";
		     if (!ipStr.matches(ipRegx))return false;
		     String[] ipAry=ipStr.split("-");
			  if(ipAry.length>1){
				  //比较末尾IP是
				  String[] ipItem=ipAry[0].split("\\.");
				  int startV=StringToInt(ipItem[3],0);
				  int endV=StringToInt(ipAry[1],0);
				  if(startV<=endV){
					  return true;
				  }
			  }
		}
		return false;
	}

	
	/**
	 * 验证IPV4以横杆号和星号为标记的范围表示
	 * 192.168.1-10.*
	 * @param ipStr IP字符串
	 * @return 符合true  不符合false
	 */
	public static boolean aandhIp4(String ipStr){
		if(ipStr!=null){
		   	 String ipRegx = "^((25[0-4]|2[0-4]\\d|1\\d{2}|[1-9]\\d|[1-9])\\.)((25[0-4]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)\\.)(25[0-4]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)-((25[0-4]|2[0-4]\\d|1\\d{2}|[1-9]\\d|[1-9])\\.\\*)$";
		     if (!ipStr.matches(ipRegx))return false;
		     String[] ipAry=ipStr.split("-");
			  if(ipAry.length>1){
				  //比较末尾IP是
				  String[] ipItem=ipAry[0].split("\\.");
				  int startV=StringToInt(ipItem[2],0);
				  ipItem=ipAry[1].split("\\.");
				  int endV=StringToInt(ipItem[0],0);
				  if(startV<=endV){
					  return true;
				  }
			  }
		}
		return false;
	}
	
	/**
	 * 验证IPV6单IP有效性
	 * @param ipStr IP字符串
	 * @return 符合true  不符合false
	 * fe80:0000:0000:0000:0204:61ff:fe9d:f156
	 /^\s*(
		(([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|
		(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|
		(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|
		(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|
		(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|
		(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|
		(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|
		(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))
		)(%.+)?\s*$/
	 *
	 */
	public static boolean singleIp6(String ipStr){
		if(ipStr!=null){
			 String singleIp4rex="((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})";
			 String ipRegx="^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|"+singleIp4rex+"|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:"+singleIp4rex+"|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:"+singleIp4rex+")|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:"+singleIp4rex+")|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:"+singleIp4rex+")|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:"+singleIp4rex+")|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:"+singleIp4rex+")|:)))(%.+)?\\s*$";
		   	 if (ipStr.matches(ipRegx))return true;
		}
		return false;
	}
	
	
	/**
	 * 验证IPV6含星范围
	 * @param ipStr IP字符串
	 * @return 符合true  不符合false
	 * 最后一个段位可以为星
	 * fe80:0000:0000:0000:0204:61ff:fe9d:
	 * fe80:0000:0000:0000:0204:61ff:192.168.1.*
	 * fe80:0000:0000:0000:0204:61ff:192.168.*.*
	/^\s*(
	(([0-9A-Fa-f]{1,4}:){7}(\*\\)|
	(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))((\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))(.\*)|(.\*){2}))))|
	(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1})(:\*)|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))((\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))(.\*)|(.\*){2}))))|
	(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2})(:\*)|((:[0-9A-Fa-f]{1,4}){0,1}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))((\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))(.\*)|(.\*){2})))))|
	(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3})(:\*)|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))((\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))(.\*)|(.\*){2})))))|
	(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4})(:\*)|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))((\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))(.\*)|(.\*){2})))))|
	(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5})(:\*)|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))((\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))(.\*)|(.\*){2})))))|
	(:(((:[0-9A-Fa-f]{1,4}){0,6})(:\*)|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))((\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d))(.\*)|(.\*){2})))))
	)(%.+)?\s*$/
	 *
	 */
	public static boolean asteriskIp6(String ipStr){
		if(ipStr!=null){
			 String asteriskIp4reg="((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d))((\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d))(.\\*)|(.\\*){2}))";
			 String ipRegx="^\\s*((([0-9A-Fa-f]{1,4}:){7}(\\*))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|"+asteriskIp4reg+"))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1})(:\\*)|:"+asteriskIp4reg+"))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2})(:\\*)|((:[0-9A-Fa-f]{1,4}){0,1}:"+asteriskIp4reg+")))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3})(:\\*)|((:[0-9A-Fa-f]{1,4}){0,2}:"+asteriskIp4reg+")))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4})(:\\*)|((:[0-9A-Fa-f]{1,4}){0,3}:"+asteriskIp4reg+")))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5})(:\\*)|((:[0-9A-Fa-f]{1,4}){0,4}:"+asteriskIp4reg+")))|(:(((:[0-9A-Fa-f]{1,4}){0,6})(:\\*)|((:[0-9A-Fa-f]{1,4}){0,5}:"+asteriskIp4reg+"))))(%.+)?\\s*$";
		   	 if (ipStr.matches(ipRegx))return true;
		}
		return false;
	}
	
	
	/**
	 * 验证IPV6以横杆号为标记的范围表示
	 * @param ipStr IP字符串
	 * @return 符合true  不符合false
	 * fe80:0000:0000:0000:0204:61ff:fe9d:2000-4000
	 * fe80:0000:0000:0000:0204:61ff:192.168.168.1-50
	/^\s*(
	(([0-9A-Fa-f]{1,4}:){7}(([0-9A-Fa-f]{1,4})-([0-9A-Fa-f]{1,4})))|
	(([0-9A-Fa-f]{1,4}:){6}((:[0-9A-Fa-f]{1,4}-([0-9A-Fa-f]{1,4}))|((25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9])\.)((25[0-5]|2[0-4]\d|1\d{2}|[1-9]?\d)\.){2}(25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|[0-9])-(25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9])))|
	(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2}-([0-9A-Fa-f]{1,4}))|:((25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9])\.)((25[0-5]|2[0-4]\d|1\d{2}|[1-9]?\d)\.){2}(25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|[0-9])-(25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9])))|
	(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3}-([0-9A-Fa-f]{1,4}))|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9])\.)((25[0-5]|2[0-4]\d|1\d{2}|[1-9]?\d)\.){2}(25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|[0-9])-(25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9]))))|
	(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4}-([0-9A-Fa-f]{1,4}))|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9])\.)((25[0-5]|2[0-4]\d|1\d{2}|[1-9]?\d)\.){2}(25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|[0-9])-(25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9]))))|
	(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5}-([0-9A-Fa-f]{1,4}))|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9])\.)((25[0-5]|2[0-4]\d|1\d{2}|[1-9]?\d)\.){2}(25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|[0-9])-(25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9]))))|
	(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6}-([0-9A-Fa-f]{1,4}))|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9])\.)((25[0-5]|2[0-4]\d|1\d{2}|[1-9]?\d)\.){2}(25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|[0-9])-(25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9]))))|
	(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}-([0-9A-Fa-f]{1,4})){0,5}:((25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9])\.)((25[0-5]|2[0-4]\d|1\d{2}|[1-9]?\d)\.){2}(25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|[0-9])-(25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9]))))
	)(%.+)?\s*$/
	 *
	 */
	public static boolean hyphenIp6(String ipStr){
		if(ipStr!=null){
			 String hyphenrex="-([0-9A-Fa-f]{1,4})";
			 String hyphenIp4rex="((25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]\\d|[1-9])\\.)((25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)\\.){2}(25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]\\d|[0-9])-(25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]\\d|[1-9])";
			 String ipRegx="^\\s*((([0-9A-Fa-f]{1,4}:){7}(([0-9A-Fa-f]{1,4})"+hyphenrex+"))|(([0-9A-Fa-f]{1,4}:){6}((:[0-9A-Fa-f]{1,4}"+hyphenrex+")|"+hyphenIp4rex+"))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2}"+hyphenrex+")|:"+hyphenIp4rex+"))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3}"+hyphenrex+")|((:[0-9A-Fa-f]{1,4})?:"+hyphenIp4rex+")))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4}"+hyphenrex+")|((:[0-9A-Fa-f]{1,4}){0,2}:"+hyphenIp4rex+")))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5}"+hyphenrex+")|((:[0-9A-Fa-f]{1,4}){0,3}:"+hyphenIp4rex+")))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6}"+hyphenrex+")|((:[0-9A-Fa-f]{1,4}){0,4}:"+hyphenIp4rex+")))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}"+hyphenrex+"){0,5}:"+hyphenIp4rex+"))))(%.+)?\\s*$";
		   	 if (!ipStr.matches(ipRegx))return false;
		   	 int startIp=0,endIp=0;
		   	 String[] ipAry=ipStr.split("-");
			  if(ipAry.length>1){
				  //比较末尾IP是
				  String[] ipItem=ipAry[0].split(":");
				  String startV=ipItem[ipItem.length-1];
				  String endV=ipAry[1];
				  if(startV.indexOf(".")>0){
					  String[] ip4ary=startV.split("\\.");
					  startV=ip4ary[ip4ary.length-1];
					  startIp=Integer.parseInt(startV);
					  endIp=Integer.parseInt(endV);
				  }else{
					  startIp=Integer.parseInt(startV,16);
					  endIp=Integer.parseInt(endV,16);
				  }
				  if(startIp<endIp){
					  return true;
				  }
			  }
			  return false;
		}
		return false;
	}
	
	
	
	/**
	 * 验证IPV6以横杆号和星号为标记的范围表示
	 * @param ipStr IP字符串
	 * @return 符合true  不符合false
	 * fe80:0000:0000:0000:0204:61ff:192.168.1-10.*
	 /^\s*(
	(([0-9A-Fa-f]{1,4}:){6}((25[0-4]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9])\.)((25[0-4]|2[0-4]\d|1\d{2}|[1-9]?\d)\.)(25[0-4]|2[0-4]\d|1\d{2}|[1-9]?\d)-((25[0-4]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9])\.\*))|
	(([0-9A-Fa-f]{1,4}:){5}(:((25[0-4]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9])\.)((25[0-4]|2[0-4]\d|1\d{2}|[1-9]?\d)\.)(25[0-4]|2[0-4]\d|1\d{2}|[1-9]?\d)-((25[0-4]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9])\.\*)))|
	(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4})?:((25[0-4]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9])\.)((25[0-4]|2[0-4]\d|1\d{2}|[1-9]?\d)\.)(25[0-4]|2[0-4]\d|1\d{2}|[1-9]?\d)-((25[0-4]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9])\.\*))))|
	(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-4]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9])\.)((25[0-4]|2[0-4]\d|1\d{2}|[1-9]?\d)\.)(25[0-4]|2[0-4]\d|1\d{2}|[1-9]?\d)-((25[0-4]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9])\.\*))))|
	(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-4]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9])\.)((25[0-4]|2[0-4]\d|1\d{2}|[1-9]?\d)\.)(25[0-4]|2[0-4]\d|1\d{2}|[1-9]?\d)-((25[0-4]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9])\.\*))))|
	(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-4]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9])\.)((25[0-4]|2[0-4]\d|1\d{2}|[1-9]?\d)\.)(25[0-4]|2[0-4]\d|1\d{2}|[1-9]?\d)-((25[0-4]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9])\.\*))))|
	(:(((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-4]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9])\.)((25[0-4]|2[0-4]\d|1\d{2}|[1-9]?\d)\.)(25[0-4]|2[0-4]\d|1\d{2}|[1-9]?\d)-((25[0-4]|2[0-4]\d|1\d{2}|[1-9]\d|[1-9])\.\*))))
	)(%.+)?\s*$/
	 *
	 */
	public static boolean aandhIp6(String ipStr){
		if(ipStr!=null){
			 String aandhIp4rex="((25[0-4]|2[0-4]\\d|1\\d{2}|[1-9]\\d|[1-9])\\.)((25[0-4]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)\\.)(25[0-4]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)-((25[0-4]|2[0-4]\\d|1\\d{2}|[1-9]\\d|[1-9])\\.\\*)";
			 String ipRegx="^\\s*((([0-9A-Fa-f]{1,4}:){6}"+aandhIp4rex+")|(([0-9A-Fa-f]{1,4}:){5}(:"+aandhIp4rex+"))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4})?:"+aandhIp4rex+")))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,2}:"+aandhIp4rex+")))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,3}:"+aandhIp4rex+")))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,4}:"+aandhIp4rex+")))|(:(((:[0-9A-Fa-f]{1,4}){0,5}:"+aandhIp4rex+"))))(%.+)?\\s*$";
			 if (!ipStr.matches(ipRegx))return false;
			 String[] ipAry=ipStr.split("-");
			  if(ipAry.length>1){
				  //比较末尾IP是
				  String[] ipItem=ipAry[0].split("\\.");
				  int startV=StringToInt(ipItem[2],0);
				  ipItem=ipAry[1].split("\\.");
				  int endV=StringToInt(ipItem[0],0);
				  if(startV<=endV){
					  return true;
				  }
			  }
			  return false;
		}
		return false;
	}
	
	/**
	 * String转换成int类型，给一个默认值
	 * 
	 * @param string
	 * @return
	 */
	public static int StringToInt(String string, int i) {
		if (StringUtil.isNotNull(string) && (isPositiveInteger(string) || isNegativeInteger(string))) {
			i = Integer.parseInt(string);
		}
		return i;
	}
	/**
	 * 判断一个字符串是否是负整数
	 * 
	 * @return true or false
	 */
	public static boolean isNegativeInteger(String num) {
		Pattern pattern = Pattern.compile("^-[0-9]*[1-9][0-9]*$");
		Matcher isNum = pattern.matcher(num);
		if (isNum.matches()) {
			return true;
		}
		return false;
	}

	/**
	 * 判断一个字符串是否是正整数
	 * 
	 * @return true or false
	 */
	public static boolean isPositiveInteger(String num) {
		Pattern pattern = Pattern.compile("^[0-9]*[1-9][0-9]*$");
		Matcher isNum = pattern.matcher(num);
		if (isNum.matches()) {
			return true;
		}
		return false;
	}


}
